
package br.gov.infraero.siga.pen.client.model;

import javax.activation.DataHandler;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "InteroperabilidadePEN", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface InteroperabilidadePEN {


    /**
     * 
     *         Inicia um trâmite de processo administrativo.
     *         No retorno desse serviço serão disponibilizados:
     *         IDT gerado para a operação (necessário para
     *         intervenções futuras) e lista de hashes dos
     *         componentes digitais solicitados.
     *       
     * 
     * @param novoTramiteDeProcesso
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.DadosTramiteDeProcessoCriado
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "dadosTramiteDeProcessoCriado", targetNamespace = "")
    @RequestWrapper(localName = "enviarProcesso", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarProcesso")
    @ResponseWrapper(localName = "enviarProcessoResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarProcessoResponse")
    public DadosTramiteDeProcessoCriado enviarProcesso(
        @WebParam(name = "novoTramiteDeProcesso", targetNamespace = "")
        NovoTramiteDeProcesso novoTramiteDeProcesso)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Inicia um trâmite de documento avulso.
     *         No retorno desse serviço serão disponibilizados:
     *         IDTs gerados para a operação (necessário para
     *         intervenções futuras). Um mesmo documento
     *         avulso pode ser enviado para vários destinatários.
     *       
     * 
     * @param novoTramiteDeDocumento
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.DadosTramiteDeDocumentoCriado
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "dadosTramiteDeDocumentoCriado", targetNamespace = "")
    @RequestWrapper(localName = "enviarDocumento", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarDocumento")
    @ResponseWrapper(localName = "enviarDocumentoResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarDocumentoResponse")
    public DadosTramiteDeDocumentoCriado enviarDocumento(
        @WebParam(name = "novoTramiteDeDocumento", targetNamespace = "")
        NovoTramiteDeDocumento novoTramiteDeDocumento)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Armazena no serviço o conteúdo binário de
     *         um componente digital.
     *       
     * 
     * @param dadosDoComponenteDigital
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "enviarComponenteDigital", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarComponenteDigital")
    @ResponseWrapper(localName = "enviarComponenteDigitalResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarComponenteDigitalResponse")
    public void enviarComponenteDigital(
        @WebParam(name = "dadosDoComponenteDigital", targetNamespace = "")
        DadosDoComponenteDigital dadosDoComponenteDigital)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Armazena no serviço uma parte de
     *         um componente digital.
     *       
     * 
     * @param dadosDaParteDeComponenteDigital
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "enviarParteDeComponenteDigital", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarParteDeComponenteDigital")
    @ResponseWrapper(localName = "enviarParteDeComponenteDigitalResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarParteDeComponenteDigitalResponse")
    public void enviarParteDeComponenteDigital(
        @WebParam(name = "dadosDaParteDeComponenteDigital", targetNamespace = "")
        DadosDaParteDeComponenteDigital dadosDaParteDeComponenteDigital)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Indica para a solução que o sistema finalizou
     *         o envio das partes de um componente digital. Se
     *         a solução confirmar essa situação, o componente
     *         passa a ser considerado como recebido, assim como
     *         no serviço que permite o upload através de uma única
     *         chamada.
     *       
     * 
     * @param dadosDoTerminoDeEnvioDePartes
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "sinalizarTerminoDeEnvioDasPartesDoComponente", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.SinalizarTerminoDeEnvioDasPartesDoComponente")
    @ResponseWrapper(localName = "sinalizarTerminoDeEnvioDasPartesDoComponenteResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.SinalizarTerminoDeEnvioDasPartesDoComponenteResponse")
    public void sinalizarTerminoDeEnvioDasPartesDoComponente(
        @WebParam(name = "dadosDoTerminoDeEnvioDePartes", targetNamespace = "")
        DadosDoTerminoDeEnvioDePartes dadosDoTerminoDeEnvioDePartes)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Busca todos os trâmites que estão
     *         aguardando alguma ação do sistema
     *         consumidor, seja como remetente
     *         ou destinatário.
     *       
     * 
     * @param filtroDePendencias
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.ListaDePendencias
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "listaDePendencias", targetNamespace = "")
    @RequestWrapper(localName = "listarPendencias", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ListarPendencias")
    @ResponseWrapper(localName = "listarPendenciasResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ListarPendenciasResponse")
    public ListaDePendencias listarPendencias(
        @WebParam(name = "filtroDePendencias", targetNamespace = "")
        FiltroDePendencias filtroDePendencias)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Busca os metadados de um determinado
     *         trâmite. Esse serviço deve ser utilizado
     *         pelo destinatário, quando o mesmo
     *         recebe uma nova pendência.
     *       
     * 
     * @param idt
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.Metadados
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "metadados", targetNamespace = "")
    @RequestWrapper(localName = "solicitarMetadados", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.SolicitarMetadados")
    @ResponseWrapper(localName = "solicitarMetadadosResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.SolicitarMetadadosResponse")
    public Metadados solicitarMetadados(
        @WebParam(name = "IDT", targetNamespace = "")
        long idt)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Faz o download do conteúdo binário de um
     *         componente digital. Deve ser chamado para
     *         componentes digitais de trâmites pendentes.
     *       
     * 
     * @param parametrosParaRecebimentoDeComponenteDigital
     * @return
     *     returns javax.activation.DataHandler
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "conteudoDoComponenteDigital", targetNamespace = "")
    @RequestWrapper(localName = "receberComponenteDigital", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReceberComponenteDigital")
    @ResponseWrapper(localName = "receberComponenteDigitalResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReceberComponenteDigitalResponse")
    public DataHandler receberComponenteDigital(
        @WebParam(name = "parametrosParaRecebimentoDeComponenteDigital", targetNamespace = "")
        ParametrosParaRecebimentoDeComponenteDigital parametrosParaRecebimentoDeComponenteDigital)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Registra o recibo de trâmite no serviço.
     *         Esse passo é um passo do destinatário, que
     *         deve produzir a assinatura sobre a cadeia
     *         de bytes correspondente ao conteúdo XML
     *         do elemento {http://pen.planejamento.gov.br/interoperabilidade/soap/v2/recibo}recibo,
     *         sem que este tenha qualquer espaço em branco ou quebra de linha
     *         entre as tags.
     *       
     * 
     * @param dadosDoReciboDeTramite
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "enviarReciboDeTramite", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarReciboDeTramite")
    @ResponseWrapper(localName = "enviarReciboDeTramiteResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.EnviarReciboDeTramiteResponse")
    public void enviarReciboDeTramite(
        @WebParam(name = "dadosDoReciboDeTramite", targetNamespace = "")
        DadosDoReciboDeTramite dadosDoReciboDeTramite)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Faz o download do recibo do trâmite,
     *         que foi assinado e enviado pelo destinátario.
     *       
     * 
     * @param idt
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.ConteudoDoReciboDeTramite
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "conteudoDoReciboDeTramite", targetNamespace = "")
    @RequestWrapper(localName = "receberReciboDeTramite", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReceberReciboDeTramite")
    @ResponseWrapper(localName = "receberReciboDeTramiteResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReceberReciboDeTramiteResponse")
    public ConteudoDoReciboDeTramite receberReciboDeTramite(
        @WebParam(name = "IDT", targetNamespace = "")
        long idt)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *       	Cancela um trâmite que ainda não foi concluído. 
     *       	Apenas o remetente pode cancelar trâmites. 
     *       	O cancelamento é permitido enquanto o recibo ainda 
     *       	não tenha sido enviado pelo destinatário.
     *       
     * 
     * @param idt
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "cancelarEnvioDeTramite", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.CancelarEnvioDeTramite")
    @ResponseWrapper(localName = "cancelarEnvioDeTramiteResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.CancelarEnvioDeTramiteResponse")
    public void cancelarEnvioDeTramite(
        @WebParam(name = "IDT", targetNamespace = "")
        long idt)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite consultar trâmites relacionados
     *         ao sistema usuário, através de várias
     *         opções de filtro.
     *       
     * 
     * @param filtroDeConsultaDeTramites
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.TramitesEncontrados
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "tramitesEncontrados", targetNamespace = "")
    @RequestWrapper(localName = "consultarTramites", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarTramites")
    @ResponseWrapper(localName = "consultarTramitesResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarTramitesResponse")
    public TramitesEncontrados consultarTramites(
        @WebParam(name = "filtroDeConsultaDeTramites", targetNamespace = "")
        FiltroDeConsultaDeTramites filtroDeConsultaDeTramites)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite consultar as hipóteses legais
     *         cadastrados no barramento.
     *       
     * 
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.HipotesesLegais
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "hipotesesLegais", targetNamespace = "")
    @RequestWrapper(localName = "consultarHipotesesLegais", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarHipotesesLegais")
    @ResponseWrapper(localName = "consultarHipotesesLegaisResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarHipotesesLegaisResponse")
    public HipotesesLegais consultarHipotesesLegais()
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite listar todos os repositórios de
     *         estruturas organizacionais, passo necessário
     *         para que os serviços de consulta de estruturas
     *         possam ser chamados.
     *       
     * 
     * @param filtroDeConsultaDeRepositoriosDeEstrutura
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.RepositoriosEncontrados
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "repositoriosEncontrados", targetNamespace = "")
    @RequestWrapper(localName = "consultarRepositoriosDeEstruturas", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarRepositoriosDeEstruturas")
    @ResponseWrapper(localName = "consultarRepositoriosDeEstruturasResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarRepositoriosDeEstruturasResponse")
    public RepositoriosEncontrados consultarRepositoriosDeEstruturas(
        @WebParam(name = "filtroDeConsultaDeRepositoriosDeEstrutura", targetNamespace = "")
        FiltroDeConsultaDeRepositoriosDeEstrutura filtroDeConsultaDeRepositoriosDeEstrutura)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite consultas as estruturas organizacionais
     *         dos repositórios de estruturas, através de um
     *         mecanismo de busca por hierarquia (com o fim de
     *         servir de backend para um componente de árvore).
     *       
     * 
     * @param filtroDeEstruturasPorEstruturaPai
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.EstruturasEncontradasNoFiltroPorEstruturaPai
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "estruturasEncontradasNoFiltroPorEstruturaPai", targetNamespace = "")
    @RequestWrapper(localName = "consultarEstruturasPorEstruturaPai", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarEstruturasPorEstruturaPai")
    @ResponseWrapper(localName = "consultarEstruturasPorEstruturaPaiResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarEstruturasPorEstruturaPaiResponse")
    public EstruturasEncontradasNoFiltroPorEstruturaPai consultarEstruturasPorEstruturaPai(
        @WebParam(name = "filtroDeEstruturasPorEstruturaPai", targetNamespace = "")
        FiltroDeEstruturasPorEstruturaPai filtroDeEstruturasPorEstruturaPai)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite consultas as estruturas organizacionais
     *         dos repositórios de estruturas, através de um
     *         mecanismo de busca por opções de filtro (com o fim de
     *         servir de backend para um componente de grade
     *         com formulário de filtro).
     *       
     * 
     * @param filtroDeEstruturas
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.EstruturasEncontradas
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "estruturasEncontradas", targetNamespace = "")
    @RequestWrapper(localName = "consultarEstruturas", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarEstruturas")
    @ResponseWrapper(localName = "consultarEstruturasResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ConsultarEstruturasResponse")
    public EstruturasEncontradas consultarEstruturas(
        @WebParam(name = "filtroDeEstruturas", targetNamespace = "")
        FiltroDeEstruturas filtroDeEstruturas)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Fornece o recibo de envio do trâmite, que
     *         significa que o remetente já enviou os
     *         componentes digitais que precisava. Agora
     *         o trâmite já se encontra na lista de pendências
     *         do destinatário.
     *       
     * 
     * @param idt
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.ConteudoDoReciboDeEnvio
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "conteudoDoReciboDeEnvio", targetNamespace = "")
    @RequestWrapper(localName = "receberReciboDeEnvio", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReceberReciboDeEnvio")
    @ResponseWrapper(localName = "receberReciboDeEnvioResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReceberReciboDeEnvioResponse")
    public ConteudoDoReciboDeEnvio receberReciboDeEnvio(
        @WebParam(name = "IDT", targetNamespace = "")
        long idt)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite que o destinatário recuse um
     *         trâmite, desde que ele já tenha recebido-o
     *         como pendência e que ainda não tenha enviado
     *         recibo de conclusão.
     *       
     * 
     * @param recusaDeTramite
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "recusarTramite", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.RecusarTramite")
    @ResponseWrapper(localName = "recusarTramiteResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.RecusarTramiteResponse")
    public void recusarTramite(
        @WebParam(name = "recusaDeTramite", targetNamespace = "")
        RecusaDeTramite recusaDeTramite)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite que o remetente defina a ciência
     *         da recusa do trâmite, desde que esteja
     *         autorizado a isso, e que o mesmo não esteja
     *         já recusado.
     *       
     * 
     * @param idt
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "cienciaRecusa", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.CienciaRecusa")
    @ResponseWrapper(localName = "cienciaRecusaResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.CienciaRecusaResponse")
    public void cienciaRecusa(
        @WebParam(name = "IDT", targetNamespace = "")
        long idt)
        throws InteroperabilidadeException_Exception
    ;

    /**
     * 
     *         Permite que o remetente solicite a reprodução
     *       	de um trâmite. Ele solicita essa reprodução a
     *       	partir do NRE do processo/documento e a identificação
     *       	do destinatário. A solução, de posse dessas informações,
     *       	procura pelo último trâmite nessa configuração
     *       	e inicia um novo trâmite com os mesmos metadados.
     *       	Nesse novo trâmite, todos os componentes digitais
     *       	são solicitados novamente ao remetente.
     *       
     * 
     * @param dadosDoTramiteAReproduzir
     * @return
     *     returns br.gov.infraero.siga.pen.client.model.DadosDoTramiteDeReproducaoCriado
     * @throws InteroperabilidadeException_Exception
     */
    @WebMethod
    @WebResult(name = "dadosDoTramiteDeReproducaoCriado", targetNamespace = "")
    @RequestWrapper(localName = "reproduzirUltimoTramite", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReproduzirUltimoTramite")
    @ResponseWrapper(localName = "reproduzirUltimoTramiteResponse", targetNamespace = "http://pen.planejamento.gov.br/interoperabilidade/soap/v2", className = "br.gov.infraero.siga.pen.client.model.ReproduzirUltimoTramiteResponse")
    public DadosDoTramiteDeReproducaoCriado reproduzirUltimoTramite(
        @WebParam(name = "dadosDoTramiteAReproduzir", targetNamespace = "")
        DadosDoTramiteAReproduzir dadosDoTramiteAReproduzir)
        throws InteroperabilidadeException_Exception
    ;

}
